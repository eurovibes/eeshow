--- a/gfx/diff.c
+++ b/gfx/diff.c
@@ -164,7 +164,7 @@
 	unsigned i;
 
 	sch_init(&sch, 0);
-	lib_init(&lib);
+	lib_init(&lib, NULL);
 
 	if (file_names->pro) {
 		if (!file_open(&pro_file, file_names->pro, NULL))
--- a/gui/gui.c
+++ b/gui/gui.c
@@ -286,7 +286,7 @@
 
 	struct file lib_files[fn->n_libs];
 
-	lib_init(&hist->lib);
+	lib_init(&hist->lib, leader);
 	libs_open = 0;
 	for (i = 0; i != fn->n_libs; i++)
 		if (lib_find_file(lib_files + libs_open, fn->libs[libs_open],
--- a/kicad/lib-parse.c
+++ b/kicad/lib-parse.c
@@ -10,7 +10,7 @@
  * (at your option) any later version.
  */
 
-
+#define _GNU_SOURCE
 #include <stdlib.h>
 #include <stdio.h>
 #include <ctype.h>
@@ -101,6 +101,7 @@
 		s = tmp;
 	}
 	lib->curr_comp->name = s;
+	lib->curr_comp->prefix = lib->prefix;
 	lib->curr_comp->aliases = NULL;
 	lib->curr_comp->units = units;
 
@@ -380,13 +381,15 @@
 
 
 
-bool lib_parse(struct lib *lib, const char *name, const struct file *related)
+bool lib_parse(struct lib *lib, const char *prefix, const char *name,
+	       const struct file *related)
 {
 	struct file file;
 	bool res;
 
 	if (!file_open(&file, name, related))
 		return 0;
+	lib->prefix = prefix;
 	res = lib_parse_file(lib, &file);
 	file_close(&file);
 	return res;
@@ -430,11 +433,41 @@
 	return res;
 }
 
+static bool gen_sym_lib_table(const struct file *file,
+    void *user, const char *line)
+{
+	char **buf = user, *tmp;
+
+	if (*buf) {
+		asprintf (&tmp, "%s%s\n", *buf, line);
+		free(*buf);
+		*buf = tmp;
+	}
+	else
+		asprintf (buf, "%s\n", line);
 
-void lib_init(struct lib *lib)
+	return 1;
+}
+
+void lib_init(struct lib *lib, const struct file *related)
 {
+	struct file sym_table_file;
+
 	lib->comps = NULL;
 	lib->next_comp = &lib->comps;
+
+	if (file_open(&sym_table_file, "sym-lib-table", related)) {
+		char *buf = NULL;
+
+		progress(2, "sym-lib-table found");
+
+		file_read(&sym_table_file, gen_sym_lib_table, &buf);
+		file_close(&sym_table_file);
+		parse_sym_lib_table (lib, buf, related);
+		free(buf);
+	}
+
+	lib->prefix = NULL;
 }
 
 
--- a/kicad/lib.h
+++ b/kicad/lib.h
@@ -106,6 +106,7 @@
 };
 
 struct comp {
+	const char *prefix;
 	const char *name;
 	struct comp_alias *aliases;
 	unsigned units;
@@ -127,6 +128,8 @@
 	struct comp *curr_comp; /* current component */
 	struct comp **next_comp;
 	struct lib_obj **next_obj;
+
+	const char *prefix;
 };
 
 
@@ -138,12 +141,16 @@
     unsigned unit, unsigned convert, const int m[6]);
 
 bool lib_parse_file(struct lib *lib, struct file *file);
-bool lib_parse(struct lib *lib, const char *name, const struct file *related);
+bool lib_parse(struct lib *lib, const char *name, const char *prefix,
+    const struct file *related);
 bool lib_find_file(struct file *file, const char *name,
     const struct file_names *fn, const struct file *related);
 bool lib_parse_search(struct lib *lib, const char *name,
     const struct file_names *fn, const struct file *related);
-void lib_init(struct lib *lib);
+void lib_init(struct lib *lib, const struct file *related);
 void lib_free(struct lib *lib);
 
+int parse_sym_lib_table (struct lib *lib, char *in,
+    const struct file *related);
+
 #endif /* !KICAD_LIB_H */
--- a/main/eeplot.c
+++ b/main/eeplot.c
@@ -220,7 +220,7 @@
 	if (!file_open(&sch_file, fn->sch, file_names.pro ? &pro_file : NULL))
 		return 1;
 
-	lib_init(&lib);
+	lib_init(&lib, file_names.pro ? &pro_file : &sch_file);
 	for (i = 0; i != fn->n_libs; i++)
 		if (!lib_parse_search(&lib, fn->libs[i], fn,
 		    file_names.pro ? &pro_file : &sch_file))
--- a/Makefile
+++ b/Makefile
@@ -19,7 +19,8 @@
 OBJS_KICAD = \
 	kicad/sch-parse.o kicad/sch-render.o kicad/lib-parse.o \
 	kicad/lib-render.o kicad/dwg.o kicad/delta.o kicad/sexpr.o \
-	kicad/pl-parse.o kicad/pl-render.o kicad/ext.o kicad/pro.o
+	kicad/pl-parse.o kicad/pl-render.o kicad/ext.o kicad/pro.o \
+	sym-lib-parser/lex.yy.o sym-lib-parser/symlib.tab.o
 OBJS_FILE = \
 	file/file.o file/git-util.o file/git-file.o file/git-hist.o
 OBJS_MISC = \
@@ -107,6 +108,11 @@
 		$(MAKE) -B version.o
 		$(CC) -o $@ $(EETEST_OBJS) version.o $(LDLIBS)
 
+#----- autogenerated stuff ----------------------------------------------------
+sym-lib-parser/lex.yy.c sym-lib-parser/symlib.tab.c:
+	make -C sym-lib-parser
+
+
 #----- Help texts -------------------------------------------------------------
 
 help.inc:	help.txt Makefile
--- /dev/null
+++ b/sym-lib-parser/Makefile
@@ -0,0 +1,10 @@
+all: lex.yy.c symlib.tab.c symlib.tab.h
+
+lex.yy.c: symlib.l symlib.tab.h
+	flex $<
+
+%.tab.c %.tab.h: %.y
+	bison -d $<
+
+clean:
+	rm -f lex.yy.c symlib.tab.c symlib.tab.h
--- /dev/null
+++ b/sym-lib-parser/symlib.l
@@ -0,0 +1,58 @@
+%option noyywrap
+%option 8bit
+%option never-interactive
+%option noyywrap
+%option nodefault
+%option bison-bridge
+%option bison-locations
+%option warn
+%option yylineno
+
+%{
+#include <stdio.h>
+
+#include "file/file.h"
+#include "kicad/lib.h"
+
+#include "symlib.tab.h"
+
+#define YY_USER_ACTION \
+{ \
+        yylloc->first_line = yylloc->last_line; \
+        yylloc->first_column = yylloc->last_column; \
+        yylloc->last_line = yylineno; \
+        yylloc->last_column = yycolumn; \
+        yycolumn += yyleng; \
+}
+
+int yycolumn = 1;
+%}
+
+%x C_ENV
+%x C_QUOTED
+
+%%
+
+[ \t]			; // ignore all whitespace
+\n			{yycolumn = 1;}
+
+"("			{*yylval=strdup(yytext);return T_LEFT;}
+")"			{*yylval=strdup(yytext);return T_RIGHT;}
+"sym_lib_table"		{*yylval=strdup(yytext);return T_SYM_LIB_TABLE;}
+"lib"			{*yylval=strdup(yytext);return T_LIB;}
+"name"			{*yylval=strdup(yytext);return T_NAME;}
+"type"			{*yylval=strdup(yytext);return T_TYPE;}
+"uri"			{*yylval=strdup(yytext);return T_URI;}
+"descr"			{*yylval=strdup(yytext);return T_DESCR;}
+"options"		{*yylval=strdup(yytext);return T_OPTIONS;}
+\$\{			{BEGIN(C_ENV);}
+\"			{BEGIN(C_QUOTED);}
+[^ \t\n]		{*yylval=strdup(yytext);return T_CHAR;}
+
+<C_ENV>\}		{BEGIN(INITIAL);}
+<C_ENV>[^}]+		{*yylval=getenv(yytext);return T_CHAR;}
+
+<C_QUOTED>\"		{BEGIN(INITIAL);}
+<C_QUOTED>.		{*yylval=strdup(yytext);return T_CHAR;}
+
+%%
--- /dev/null
+++ b/sym-lib-parser/symlib.y
@@ -0,0 +1,115 @@
+%{
+#define _GNU_SOURCE
+#include <stdio.h>
+#include <stdlib.h>
+#include <string.h>
+
+#include "file/file.h"
+#include "kicad/lib.h"
+
+#include "symlib.tab.h"
+
+extern int yylex();
+extern int yyparse (struct lib *lib, const struct file *related);
+extern FILE* yyin;
+
+void yyerror (YYLTYPE *locp, struct lib *lib, const struct file *related,
+			      const char* msg);
+
+static char *concat (char *a, char *b)
+{
+	char *out;
+
+	if (b)
+		asprintf (&out, "%s%s", a, b);
+	else
+		asprintf (&out, "%s", a);
+
+	return out;
+}
+%}
+
+%define api.pure full
+%define api.value.type {char *}
+%define parse.lac full
+%define parse.error verbose
+
+%parse-param {struct lib *lib} {const struct file *related}
+
+%locations
+
+%token T_LEFT T_RIGHT
+%token T_SYM_LIB_TABLE
+%token T_LIB
+%token T_NAME
+%token T_TYPE
+%token T_URI
+%token T_OPTIONS
+%token T_DESCR
+%token T_CHAR
+
+%start sym_lib_table
+
+%%
+
+sym_lib_table: T_LEFT T_SYM_LIB_TABLE libs T_RIGHT
+;
+
+libs: lib
+| libs lib
+;
+
+lib: T_LEFT T_LIB name type uri options descr T_RIGHT	{lib_parse (lib, $3, $5, related);}
+;
+
+name: T_LEFT T_NAME string T_RIGHT	{ $$ = $3; }
+;
+
+type: T_LEFT T_TYPE string T_RIGHT
+;
+
+uri: T_LEFT T_URI string T_RIGHT	{ $$ = $3; }
+;
+
+options: T_LEFT T_OPTIONS T_RIGHT
+| T_LEFT T_OPTIONS string T_RIGHT
+;
+
+descr: T_LEFT T_DESCR T_RIGHT
+| T_LEFT T_DESCR string T_RIGHT
+;
+
+string: T_CHAR
+| string T_CHAR		{$$ = concat($1, $2);}
+| string T_LIB		{$$ = concat($1, $2);}
+;
+
+%%
+
+int parse_sym_lib_table (struct lib *lib, char *in,
+			 const struct file *related)
+{
+	yyin = fmemopen (in, strlen(in), "r");
+	if (!yyin)
+	{
+		perror ("open sym-lib-table failed:");
+		return 1;
+	}
+
+	do
+	{
+		yyparse (lib, related);
+	} while (!feof (yyin));
+
+	return 0;
+}
+
+void yyerror (YYLTYPE *locp, struct lib *lib, const struct file *related,
+	      const char* msg)
+{
+	fprintf (stderr, "Parse error @(%d:%d / %d:%d) : %s\n",
+		 locp->first_line, locp->first_column,
+		 locp->last_line, locp->last_column, msg);
+
+	exit (1);
+}
--- a/kicad/lib-render.c
+++ b/kicad/lib-render.c
@@ -10,7 +10,7 @@
  * (at your option) any later version.
  */
 
-
+#define _GNU_SOURCE
 #include <stdlib.h>
 #include <stdio.h>
 #include <assert.h>
@@ -723,7 +723,42 @@
 			if (!strcmp(alias->name, name))
 				return comp;
 	}
-	error("\"%s\" not found", name);
+
+	for (comp = lib->comps; comp; comp = comp->next) {
+		char *combined = NULL;
+		int found = 0;
+
+		if (!comp->prefix)
+			continue;
+
+		asprintf(&combined, "%s:%s", comp->prefix, comp->name);
+		progress(3, "compare %s with %s", combined, name);
+
+		if (!strcmp(combined, name)) {
+			progress(2, "library %s found", name);
+			found = 1;
+		}
+		free(combined);
+		if (found)
+			return comp;
+
+		for (alias = comp->aliases; alias; alias = alias->next)
+		{
+			asprintf(&combined, "%s:%s", comp->prefix, alias->name);
+			progress(3, "compare \"%s\" with \"%s\"",
+				 combined, name);
+
+			if (!strcmp(combined, name)) {
+				progress(2, "component \"%s\" found", name);
+				found = 1;
+			}
+			free(combined);
+			if (found) {
+				return comp;
+			}
+		}
+	}
+	error("component \"%s\" not found", name);
 	return NULL;
 }
 
